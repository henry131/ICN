# Topology Structure and General Parameters
[General]
**.name="${name=tree_4_3}"
**.u = ${un = 00,01,02,03,04,05,06,07,08,09,10}
seed-set = ${rep = 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20}
network = networks.${name}_u${un}_r${rep}_network

############################# Output ##########################################

# Turn off vector output
**.vector-recording = false
# Statistics Output
output-scalar-file = ${sl}-${cd}/u${un}/ccn-id${rep}.sca

########################## Run time Inputs ####################################

##Arriva rate of each timer
**.lambda = 20
##Timer indicating that a given content is not downloaded (>> N_D*d, where N_D is the network diameter, and d is the average delay on a link)
**.RTT = 2
##Timer indicating how often checking for a given content download
**.check_time = 0.1

#####################################################################
##########################  Caching  ################################
#####################################################################
##Caching meta-algorithms: fixP, lce, no_cache lcd, btw, prob_cache
**.DS = "${cd=fix0.1}"
##Caching algorithms: {lru,lfu,fifo,two,random}_cache
**.RS = "${cr=lru}_cache"
##Cache size (in chunks)
# scenario - ubiquitous caching
**.C = 100

#####################################################################
###################  Content Distribution ###########################
#####################################################################
##Average size of  a content (in chunks)
## **.F =  ${fsize=1}
**.file_size =  ${fsize=1}
##Shaping factor of the Zipf distribution
**.alpha = ${a = 0.9}
##Cardinality of the catalogue; keep a 0.01% cache to catalogue ratio
**.objects = 100000

#####################################################################
##########################  Strategy ################################
#####################################################################
##Strategy layer (interest forwarding):
**.FS = "${sl=nrr}"
**.TTL1 = ${ttl = 1000}
**.TTL2 = ${ttl}

#####################################################################
########################  Statistics ################################
#####################################################################
##Time window for the stability checking
**.window = 60
##Sampling hit_rate time 
**.ts = 0.1
##Ex: in this case every 60 secs the engine checks for the stabilization. Every 0.1 sec a sample is collected. Thus, the stabilization is checked every 60/0.1=600 samples.
##Number of nodes to be full ([0-1]) for starting statistic collections
**.partial_n = 1 
# Variance threshold for stabilisation confirmed
**.variance_threshold = ${variance=0.05}

##Time of simulation after the stabilization
**.steady = 600

## Required for running (misc)
**.fail_time = 0
**.fail_transient = 0
**.fail_duration = 0
