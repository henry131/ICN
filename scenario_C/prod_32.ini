#CONFIGURATION

#General parameters
# predefine network in NED files then specify here
#network= networks.${net=abilene,dtelecom,geant,level3,tiger}_network
network= networks.${net=dtelecom,level3}_network
# repetitions (and random number seed)
seed-set = ${rep = 1..10 step 1}
#seed-set = ${rep = 1}
# allow user inputs for non-supplied parameters (won't be needed)
cmdenv-interactive=true

#<aa> RNG means "random number genetator". By default, all modules use the RNG 0. Here we instantiate other two RNGs. RNG 1 will be used only for the traffic generator (client) and content distribution. RNG 2 will be used only for the content store.  In this way, for example, the generation of requests is independent from the decisions taken by the decision policy in the context store. All the other modules will use the default RNG (RNG 0). See omnet manual section 10.5 for more info about RNGs.
num-rngs=3
**.client[*].rng-0 = 1
**.content_distribution.rng-0 = 1
**.content_store.rng-0 = 2
#</aa>

#####################################################################
######################## Repositories ##############################
#####################################################################

# NB set in bus.ned to match the same as below (hence can be commeted out)

##Indicates which node is a repository (left blank for random positioning)
**.node_repos = ""
##Indicates how many repositories there are on the network
**.num_repos = 16
##Indicates in how many (random) repositories a given content is replicated
*.replicas = 1

#####################################################################
########################## Clients ################################
#####################################################################

##Indicates which node is a client (left blank for random positioning)
**.node_clients = ""
##Indicates how many clients there are on the network
**.num_clients = 32

## Arrival request rate at each client
**.lambda = 20
##Timer indicating that a given content is not downloaded (>> N_D*d, where N_D is the network diameter, and d is the average delay on a link)
**.RTT = 5
##Timer indicating how often checking for a given content download
**.check_time = 0.1
##Type of the simulated clients: Independent Request Model (IRM)
##**.client_type = "client_${clientType = IRM }"

#####################################################################
################### Content Distribution ###########################
#####################################################################
##Average size of a content (in chunks)
**.file_size = 1
##Shaping factor of the Zipf distribution
**.alpha = ${a = 0.9}
##Cardinality of the catalog
**.objects = 10^5

#####################################################################
########################## Forwarding ##############################
#####################################################################
##Strategy layer (interest forwarding):
## - spr: send interests toward the closest repository (in terms of hop count)[comcom,techrep]
**.FS = "${ F = nrr }" 

#####################################################################
########################## Caching ################################
#####################################################################
##Caching meta-algorithms:
**.DS = "${ D = never, lce, fix0.05, fix0.005, lcd, ffc, tfc, ffc0.2, ffc0.1, ffc0.05}"
##Caching algorithms: {lru,lfu,fifo,two,random}_cache
**.RS = "${ R = lru }_cache"
##Cache size (in chunks)
**.C = 100
**.NC = 100


#####################################################################
######################## Statistics ################################
#####################################################################
##Time window for the stability checking
**.window = ${window=60}
##Sampling hit_rate time
**.ts = 0.1
## Every **.window secs the engine checks for the stabilization. Every **.ts sec a sample is collected.
## Thus, the stabilization is checked every N samples, where N = **.window x **.ts .
## Number of nodes to be full (-1 defaults to *all* nodes) for starting statistic collections
**.partial_n = 1
## A cache will be considered stable if the sequence of the last N samples have a variance smaller than this value
**.variance_threshold = ${variance=0.05}

##Time of simulation after the stabilization
**.steady = ${ mytime = 600}

########## ADDITIONAL #####################
**.fail_time = 0
**.fail_duration = 0
**.fail_transient = 0

#turns off vecotr recording (granular / per-content statisitics)
**.vector-recording = false

output-scalar-file = ${resultdir}/${net}/F-${F}/D-${D}/R-${R}/alpha-${a}/ccn-id${rep}.sca


